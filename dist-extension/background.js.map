{"version":3,"file":"background.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://password-manager-app/webpack/bootstrap","webpack://password-manager-app/webpack/runtime/make namespace object","webpack://password-manager-app/./src/extension/background.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","chrome.runtime.onInstalled.addListener(function () {\n    console.log('Extension installed');\n});\n// Listen for messages from web app and content scripts\nchrome.runtime.onMessageExternal.addListener(function (message, sender, sendResponse) {\n    console.log('Received external message:', message, 'from:', sender);\n    if (message.type === 'SAVE_AUTH_DATA') {\n        // Save auth data to extension storage\n        chrome.storage.local.set({ auth: message.payload }, function () {\n            if (chrome.runtime.lastError) {\n                console.error('Error saving auth data:', chrome.runtime.lastError);\n                sendResponse({ success: false, error: chrome.runtime.lastError });\n            }\n            else {\n                console.log('Auth data saved successfully');\n                // Notify popup about the auth state change\n                chrome.runtime.sendMessage({\n                    type: 'AUTH_STATE_CHANGED',\n                    payload: message.payload\n                });\n                sendResponse({ success: true });\n            }\n        });\n    }\n    if (message.type === 'CLEAR_AUTH_DATA') {\n        // Clear auth data from extension storage\n        chrome.storage.local.remove('auth', function () {\n            if (chrome.runtime.lastError) {\n                console.error('Error clearing auth data:', chrome.runtime.lastError);\n                sendResponse({ success: false, error: chrome.runtime.lastError });\n            }\n            else {\n                console.log('Auth data cleared successfully');\n                // Notify popup about the auth state change\n                chrome.runtime.sendMessage({\n                    type: 'AUTH_STATE_CHANGED',\n                    payload: null\n                });\n                sendResponse({ success: true });\n            }\n        });\n    }\n    // Required for async sendResponse\n    return true;\n});\n// Listen for internal messages\nchrome.runtime.onMessage.addListener(function (message, sender, sendResponse) {\n    console.log('Received internal message:', message);\n    if (message.type === 'AUTH_STATE_CHANGED') {\n        chrome.storage.local.set({ auth: message.payload }, function () {\n            if (chrome.runtime.lastError) {\n                console.error('Error saving auth state:', chrome.runtime.lastError);\n            }\n            else {\n                console.log('Auth state updated in storage');\n            }\n        });\n    }\n    return true;\n});\nexport {};\n// Handle authentication and other background tasks\n"],"names":[],"sourceRoot":""}